<?php
/*
 * MagicTelecomAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 on 06/28/2016
 */

namespace MagicTelecomAPILib\Controllers;

use MagicTelecomAPILib\APIException;
use MagicTelecomAPILib\APIHelper;
use MagicTelecomAPILib\Configuration;
use MagicTelecomAPILib\CustomAuthUtility;
use Unirest\Unirest;
class AccountsController {
    /**
     * Create a new caller location
     * @param  string                 $accountNumber            Required parameter: Number of the account
     * @param  CallerLocationForm     $callerLocationForm       Required parameter: Caller Location Data
     * @return mixed response from the API call*/
    public function createCallerLocations (
                $accountNumber,
                $callerLocationForm) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/caller_locations';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number'       => $accountNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'         => 'APIMATIC 2.0',
            'Accept'             => 'application/json',
            'content-type'       => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($callerLocationForm));

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Get a caller location by Id
     * @param  string     $accountNumber          Required parameter: Account Number
     * @param  int        $callerLocationId       Required parameter: a caller location id
     * @return mixed response from the API call*/
    public function getCallerLocationById (
                $accountNumber,
                $callerLocationId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/caller_locations/{caller_location_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number'     => $accountNumber,
            'caller_location_id' => $callerLocationId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Delete all caller locations
     * @param  string     $accountNumber      Required parameter: Account Number
     * @return string response from the API call*/
    public function deleteCallerLocations (
                $accountNumber) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/caller_locations';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Update a caller location
     * @param  string                 $accountNumber            Required parameter: Account Number
     * @param  int                    $callerLocationId         Required parameter: Caller Location Id
     * @param  CallerLocationForm     $callerLocationForm       Required parameter: Caller Location Params
     * @return string response from the API call*/
    public function updateCallerLocationById (
                $accountNumber,
                $callerLocationId,
                $callerLocationForm) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/caller_locations/{caller_location_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number'       => $accountNumber,
            'caller_location_id'   => $callerLocationId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'         => 'APIMATIC 2.0',
            'content-type'       => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::put($queryUrl, $headers, json_encode($callerLocationForm));

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('	 Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Delete a caller location by id
     * @param  string     $accountNumber          Required parameter: Account Number
     * @param  int        $callerLocationId       Required parameter: Caller Location Id
     * @return string response from the API call*/
    public function deleteCallerLocationById (
                $accountNumber,
                $callerLocationId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/caller_locations/{caller_location_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number'     => $accountNumber,
            'caller_location_id' => $callerLocationId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'       => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('	 Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow clients to get the list of caller locations for the specific account.
     * @param  string       $accountNumber      Required parameter: Number of the account
     * @param  int|null     $page               Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
     * @param  int|null     $limit              Optional parameter: Maximum number of results to return in the response.
     * @return mixed response from the API call*/
    public function getCallerLocations (
                $accountNumber,
                $page = NULL,
                $limit = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/caller_locations';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'page'           => (null != $page) ? $page : 1,
            'limit'          => (null != $limit) ? $limit : 10,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow the admin to get the list of all accounts.
     * @param  int|null        $page       Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
     * @param  int|null        $limit      Optional parameter: Maximum number of results to return in the response.
     * @param  string|null     $filter     Optional parameter: Allowed fields: number, email, contact_number, firstname, lastname. Use the following delimiters to build your filters params. The vertical bar ('|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com\\\/users?filter='name::todd|city::denver|title::grand poobah
     * @return mixed response from the API call*/
    public function getAccounts (
                $page = NULL,
                $limit = NULL,
                $filter = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'page'   => (null != $page) ? $page : 1,
            'limit'  => (null != $limit) ? $limit : 10,
            'filter' => $filter,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Create a new account.
     * @param  AccountForm     $accountForm      Required parameter: TODO: type description here
     * @return mixed response from the API call*/
    public function createAccount (
                $accountForm) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($accountForm));

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Delete an account
     * @param  string     $accountNumber      Required parameter: Account Number
     * @return string response from the API call*/
    public function deleteAccount (
                $accountNumber) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow clients to get a specific account.
     * @param  string     $accountNumber      Required parameter: Account Number
     * @return mixed response from the API call*/
    public function getAccount (
                $accountNumber) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     *  Update an account by a given account_number
     * @param  string          $accountNumber      Required parameter: Account Number
     * @param  AccountForm     $accountForm        Required parameter: Form parameters
     * @return string response from the API call*/
    public function updateAccount (
                $accountNumber,
                $accountForm) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::put($queryUrl, $headers, json_encode($accountForm));

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Deletes all cdrs requests from customer's account.
     * @param  string     $accountNumber      Required parameter: Account Number
     * @return string response from the API call*/
    public function deleteCdrs (
                $accountNumber) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/cdrs';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow clients to get the list of cdr request for the specific account.
     * @param  string          $accountNumber      Required parameter: Account Number
     * @param  int|null        $page               Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
     * @param  int|null        $limit              Optional parameter: Maximum number of results to return in the response.
     * @param  string|null     $filter             Optional parameter: Allowed fields: service_type, from, to and created. Use the following delimiters to build your filters params. The vertical bar ('|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com\\\/users?filter='name::todd|city::denver|title::grand poobah
     * @return mixed response from the API call*/
    public function getCdrs (
                $accountNumber,
                $page = NULL,
                $limit = NULL,
                $filter = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/cdrs';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'page'           => (null != $page) ? $page : 1,
            'limit'          => (null != $limit) ? $limit : 10,
            'filter'         => $filter,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Creates a cdr request
     * @param  string      $accountNumber      Required parameter: Account Number
     * @param  CdrForm     $cdrsForm           Required parameter: cdrs params
     * @return mixed response from the API call*/
    public function createCdrs (
                $accountNumber,
                $cdrsForm) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/cdrs';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($cdrsForm));

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow clients to download the cdrs in a file
     * @param  string     $accountNumber      Required parameter: Account Number
     * @param  string     $cdrId              Required parameter: Cdr Id
     * @return mixed response from the API call*/
    public function getCdrById (
                $accountNumber,
                $cdrId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/cdrs/{cdr_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'cdr_id'         => $cdrId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('	 Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Deletes a cdr file from customer's account.
     * @param  string     $accountNumber      Required parameter: Account Number
     * @param  string     $cdrId              Required parameter: Cdr Id
     * @return string response from the API call*/
    public function deleteCdrById (
                $accountNumber,
                $cdrId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/cdrs/{cdr_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'cdr_id'         => $cdrId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Deletes all phone_number from customer's account. These numbers must be unassigned and returned to Magic stock.
     * @param  string     $accountNumber      Required parameter: Account Number
     * @return string response from the API call*/
    public function deleteDids (
                $accountNumber) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/dids';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Deletes a phone_number from customer's account. This number must be unassigned and returned to Magic stock.
     * @param  string     $accountNumber        Required parameter: Account Number
     * @param  string     $telephoneNumber      Required parameter: Telephone Number
     * @return string response from the API call*/
    public function deleteTelephoneNumber (
                $accountNumber,
                $telephoneNumber) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/dids/{telephone_number}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number'   => $accountNumber,
            'telephone_number' => $telephoneNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'     => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow clients to get the a specific phone number.
     * @param  string     $accountNumber        Required parameter: Account Number
     * @param  string     $telephoneNumber      Required parameter: Telephone Number
     * @return mixed response from the API call*/
    public function getTelephoneNumber (
                $accountNumber,
                $telephoneNumber) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/dids/{telephone_number}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number'   => $accountNumber,
            'telephone_number' => $telephoneNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'     => 'APIMATIC 2.0',
            'Accept'         => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow client to perform operations on a specific did
     * @param  string                  $accountNumber             Required parameter: Account Number
     * @param  string                  $telephoneNumber           Required parameter: Telephone Number
     * @param  TelephoneNumberForm     $telephoneNumberForm       Required parameter: Phone params
     * @return void response from the API call*/
    public function updateTelephoneNumber (
                $accountNumber,
                $telephoneNumber,
                $telephoneNumberForm) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/dids/{telephone_number}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number'        => $accountNumber,
            'telephone_number'      => $telephoneNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'          => 'APIMATIC 2.0',
            'content-type'        => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::patch($queryUrl, $headers, json_encode($telephoneNumberForm));

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }
    }
        
    /**
     * Allow clients to get the list of numbers for the specific account
     * @param  string          $accountNumber      Required parameter: Account Number
     * @param  int|null        $page               Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
     * @param  int|null        $limit              Optional parameter: Maximum number of results to return in the response.
     * @param  string|null     $filter             Optional parameter: Allowed fields: trunk_id, phone_number, country_iso2, region_handle, location_handle, sip_end_point_uri.\n * Use the following delimiters to build your filters params. The vertical bar ('|') to separate individual filter phrases and a double colon ('::') to separate the names and values. \n * The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. \n * Example: www.example.com\\\/users?filter='name::todd|city::denver|title::grand poobah
     * @return mixed response from the API call*/
    public function getDids (
                $accountNumber,
                $page = NULL,
                $limit = NULL,
                $filter = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/dids';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'page'           => (null != $page) ? $page : 1,
            'limit'          => (null != $limit) ? $limit : 10,
            'filter'         => $filter,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Deletes all trunks from customer's account. Numbers on that trunk must be unassigned and returned to Magic stock
     * @param  string     $accountNumber      Required parameter: Account Number
     * @return string response from the API call*/
    public function deleteTrunks (
                $accountNumber) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/trunks';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow clients to get the list of trunks for the specific account
     * @param  string          $accountNumber      Required parameter: Account Number
     * @param  int|null        $page               Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
     * @param  int|null        $limit              Optional parameter: Maximum number of results to return in the response
     * @param  string|null     $filter             Optional parameter: Allowed fields: trunk_handle. Use the following delimiters to build your filters params. The vertical bar ('|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com\\\/users?filter='name::todd|city::denver|title::grand poobah
     * @return mixed response from the API call*/
    public function getTrunks (
                $accountNumber,
                $page = NULL,
                $limit = NULL,
                $filter = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/trunks';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'page'           => (null != $page) ? $page : 1,
            'limit'          => (null != $limit) ? $limit : 10,
            'filter'         => $filter,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Deletes a trunk from customer's account. Numbers on that trunk must be unassigned and returned to Magic stock.
     * @param  string     $accountNumber      Required parameter: Accoubt Number
     * @param  string     $trunkId            Required parameter: Trunk id
     * @return string response from the API call*/
    public function deleteTrunkById (
                $accountNumber,
                $trunkId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/trunks/{trunk_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'trunk_id'       => $trunkId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow clients to get the a specific trunk
     * @param  string     $accountNumber      Required parameter: Account Number
     * @param  string     $trunkId            Required parameter: Trunk id
     * @return mixed response from the API call*/
    public function getTrunkById (
                $accountNumber,
                $trunkId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/trunks/{trunk_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'trunk_id'       => $trunkId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Delete all carts from an account
     * @param  string     $accountNumber      Required parameter: Account Number
     * @return void response from the API call*/
    public function deleteCarts (
                $accountNumber) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/carts';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }
    }
        
    /**
     * Allow clients to get the list of carts.
     * @param  string          $accountNumber      Required parameter: Account number
     * @param  int|null        $page               Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
     * @param  int|null        $limit              Optional parameter: Maximum number of results to return in the response.
     * @param  string|null     $filter             Optional parameter: Allowed fields: cart_status_handle, created. Use the following delimiters to build your filters params. The vertical bar ('|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com\\/users?filter='name::todd|city::denver|title::grand poobah'
     * @param  string|null     $sort               Optional parameter: Allowed fields: created. Use sort query-string parameter that contains a delimited set of property names. For each property name, sort in ascending order, and for each property prefixed with a dash ('-') sort in descending order. Separate each property name with a vertical bar ('|'), which is consistent with the separation of the name\\/value pairs in filtering, above. For example, if we want to retrieve users in order of their last name (ascending), first name (ascending) and hire date (descending), the request might look like this www.example.com\\/users?sort='last_name|first_name|-hire_date'
     * @return mixed response from the API call*/
    public function getCarts (
                $accountNumber,
                $page = NULL,
                $limit = NULL,
                $filter = NULL,
                $sort = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/carts';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'page'           => (null != $page) ? $page : 1,
            'limit'          => (null != $limit) ? $limit : 10,
            'filter'         => $filter,
            'sort'           => $sort,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Create an cart
     * @param  string     $accountNumber      Required parameter: Account number
     * @return mixed response from the API call*/
    public function createCarts (
                $accountNumber) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/carts';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 403) {
            throw new APIException('User not authorized to perform the operation', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Delete a cart
     * @param  string     $accountNumber      Required parameter: Account number
     * @param  string     $cartId             Required parameter: Cart Id
     * @return void response from the API call*/
    public function deleteCart (
                $accountNumber,
                $cartId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/carts/{cart_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'cart_id'        => $cartId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }
    }
        
    /**
     * Allow clients to get a specific cart.
     * @param  string     $accountNumber      Required parameter: Account number
     * @param  string     $cartId             Required parameter: Cart id
     * @return mixed response from the API call*/
    public function getCart (
                $accountNumber,
                $cartId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/carts/{cart_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'cart_id'        => $cartId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Checkout a cart and create an order
     * @param  string               $accountNumber          Required parameter: Account Number
     * @param  string               $cartId                 Required parameter: Cart Id
     * @param  CartCheckoutForm     $cartCheckoutForm       Required parameter: TODO: type description here
     * @return mixed response from the API call*/
    public function createCartCheckout (
                $accountNumber,
                $cartId,
                $cartCheckoutForm) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/carts/{cart_id}/checkout';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number'     => $accountNumber,
            'cart_id'            => $cartId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($cartCheckoutForm));

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 403) {
            throw new APIException('User not authorized to perform the operation', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Delete all carts items
     * @param  string     $accountNumber      Required parameter: Account Number
     * @param  int        $cartId             Required parameter: Cart Id
     * @return string response from the API call*/
    public function deleteItems (
                $accountNumber,
                $cartId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/carts/{cart_id}/items';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'cart_id'        => $cartId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow clients to get the list of cart items.
     * @param  string       $accountNumber      Required parameter: Account Number
     * @param  int          $cartId             Required parameter: Cart Id
     * @param  int|null     $page               Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
     * @param  int|null     $limit              Optional parameter: Maximum number of results to return in the response.
     * @return mixed response from the API call*/
    public function getItems (
                $accountNumber,
                $cartId,
                $page = NULL,
                $limit = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/carts/{cart_id}/items';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'cart_id'        => $cartId,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'page'           => (null != $page) ? $page : 1,
            'limit'          => (null != $limit) ? $limit : 10,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * TODO: type endpoint description here
     * @param  string       $accountNumber      Required parameter: Account Number
     * @param  int          $cartId             Required parameter: Cart Id
     * @param  ItemForm     $itemForm           Required parameter: TODO: type description here
     * @return mixed response from the API call*/
    public function createItems (
                $accountNumber,
                $cartId,
                $itemForm) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/carts/{cart_id}/items';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'cart_id'        => $cartId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($itemForm));

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 403) {
            throw new APIException('User not authorized to perform the operation', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource', 404, $response->body);
        }

        else if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Delete a cart item
     * @param  string     $accountNumber      Required parameter: Account Number
     * @param  int        $cartId             Required parameter: Cart Id
     * @param  int        $itemId             Required parameter: Item Id
     * @return string response from the API call*/
    public function deleteItem (
                $accountNumber,
                $cartId,
                $itemId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/carts/{cart_id}/items/{item_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'cart_id'        => $cartId,
            'item_id'        => $itemId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow clients to get a specific cart item.
     * @param  string     $accountNumber      Required parameter: TODO: type description here
     * @param  int        $cartId             Required parameter: TODO: type description here
     * @param  int        $itemId             Required parameter: TODO: type description here
     * @return mixed response from the API call*/
    public function getItem (
                $accountNumber,
                $cartId,
                $itemId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/carts/{cart_id}/items/{item_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'cart_id'        => $cartId,
            'item_id'        => $itemId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow clients to get the list of orders.
     * @param  string          $accountNumber      Required parameter: Account Number
     * @param  int|null        $page               Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
     * @param  int|null        $limit              Optional parameter: Maximum number of results to return in the response.
     * @param  string|null     $filter             Optional parameter: Allowed fields: from, to, created. Use the following delimiters to build your filters params. The vertical bar ('|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com\\\/users?filter='name::todd|city::denver|title::grand poobah
     * @return mixed response from the API call*/
    public function getOrders (
                $accountNumber,
                $page = NULL,
                $limit = NULL,
                $filter = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/orders';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'page'           => (null != $page) ? $page : 1,
            'limit'          => (null != $limit) ? $limit : 10,
            'filter'         => $filter,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow clients to get a specific order.
     * @param  string     $accountNumber      Required parameter: Account Number
     * @param  int        $orderId            Required parameter: Order Id
     * @return mixed response from the API call*/
    public function getOrder (
                $accountNumber,
                $orderId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/orders/{order_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'order_id'       => $orderId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Update a trunk
     * @param  string        $accountNumber      Required parameter: TODO: type description here
     * @param  int           $trunkId            Required parameter: TODO: type description here
     * @param  TrunkForm     $trunkForm          Required parameter: TODO: type description here
     * @return string response from the API call*/
    public function updateTrunk (
                $accountNumber,
                $trunkId,
                $trunkForm) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/trunks/{trunk_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'trunk_id'       => $trunkId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::patch($queryUrl, $headers, json_encode($trunkForm));

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow clients to get the list of tokens for the specific account.
     * @param  string       $accountNumber      Required parameter: Account Number
     * @param  int|null     $page               Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
     * @param  int|null     $limit              Optional parameter: Maximum number of results to return in the response.
     * @return mixed response from the API call*/
    public function getAccessTokens (
                $accountNumber,
                $page = NULL,
                $limit = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/access-tokens';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'page'           => (null != $page) ? $page : 1,
            'limit'          => (null != $limit) ? $limit : 10,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Delete an access token
     * @param  string     $accountNumber      Required parameter: Account Number
     * @param  string     $token              Required parameter: Token
     * @return string response from the API call*/
    public function deleteAccessToken (
                $accountNumber,
                $token) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/access-tokens/{token}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'token'          => $token,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Allow clients to get a specific token.
     * @param  string     $accountNumber      Required parameter: Account Number
     * @param  string     $token              Required parameter: Token
     * @return mixed response from the API call*/
    public function getAccessToken (
                $accountNumber,
                $token) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/access-tokens/{token}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'token'          => $token,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Update an account by a given account_number
     * @param  string        $accountNumber      Required parameter: Account Number
     * @param  string        $token              Required parameter: Token
     * @param  TokenForm     $tokenForm          Required parameter: TODO: type description here
     * @return string response from the API call*/
    public function updateAccessToken (
                $accountNumber,
                $token,
                $tokenForm) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/access-tokens/{token}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number' => $accountNumber,
            'token'          => $token,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::patch($queryUrl, $headers, json_encode($tokenForm));

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Create a new Access Token.
     * @param  string        $accountNumber         Required parameter: Account Number
     * @param  TokenForm     $accessTokenForm       Required parameter: TODO: type description here
     * @return mixed response from the API call*/
    public function createAccessTokens (
                $accountNumber,
                $accessTokenForm) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/accounts/{account_number}/access-tokens';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'account_number'    => $accountNumber,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'      => 'APIMATIC 2.0',
            'Accept'          => 'application/json',
            'content-type'    => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($accessTokenForm));

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($request);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('You are not authenticated', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('This action needs a valid WSSE header', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('Resource not found', 404, $response->body);
        }

        else if ($response->code == 400) {
            throw new APIException('Http bad request', 400, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
}