<?php 
/*
 * MagicTelecomAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/14/2016
 */

namespace MagicTelecomAPILib\Models;

use JsonSerializable;

class Cdrs implements JsonSerializable {
    /**
     * TODO: Write general description for this property
     * @param string $userId public property
     */
    protected $userId;

    /**
     * TODO: Write general description for this property
     * @param string $serviceType public property
     */
    protected $serviceType;

    /**
     * TODO: Write general description for this property
     * @param string $startDate public property
     */
    protected $startDate;

    /**
     * TODO: Write general description for this property
     * @param string $endDate public property
     */
    protected $endDate;

    /**
     * Constructor to set initial or default values of member properties
	 * @param   string            $userId         Initialization value for the property $this->userId      
	 * @param   string            $serviceType    Initialization value for the property $this->serviceType 
	 * @param   string            $startDate      Initialization value for the property $this->startDate   
	 * @param   string            $endDate        Initialization value for the property $this->endDate     
     */
    public function __construct()
    {
        if(4 == func_num_args())
        {
            $this->userId       = func_get_arg(0);
            $this->serviceType  = func_get_arg(1);
            $this->startDate    = func_get_arg(2);
            $this->endDate      = func_get_arg(3);
        }
    }

    /**
     * Return a property of the response if it exists.
     * Possibilities include: code, raw_body, headers, body (if the response is json-decodable)
     * @return mixed
     */
    public function __get($property)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            $value = $this->$property;
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                return utf8_encode($value);
            }
            else {
                return $value;
            }
        }
    }
    
    /**
     * Set the properties of this object
     * @param string $property the property name
     * @param mixed $value the property value
     */
    public function __set($property, $value)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                $this->$property = utf8_encode($value);
            }
            else {
                $this->$property = $value;
            }
        }

        return $this;
    }

    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['user_id']      = $this->userId;
        $json['service_type'] = $this->serviceType;
        $json['start_date']   = $this->startDate;
        $json['end_date']     = $this->endDate;
        return $json;
    }
}